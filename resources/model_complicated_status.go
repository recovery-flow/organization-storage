/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ComplicatedStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComplicatedStatus{}

// ComplicatedStatus struct for ComplicatedStatus
type ComplicatedStatus struct {
	// Current compliance state of the organization
	State string `json:"state"`
	Marks []ComplicatedStatusMarksInner `json:"marks"`
	// Date from which the compliance state is effective
	From time.Time `json:"from"`
}

type _ComplicatedStatus ComplicatedStatus

// NewComplicatedStatus instantiates a new ComplicatedStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComplicatedStatus(state string, marks []ComplicatedStatusMarksInner, from time.Time) *ComplicatedStatus {
	this := ComplicatedStatus{}
	this.State = state
	this.Marks = marks
	this.From = from
	return &this
}

// NewComplicatedStatusWithDefaults instantiates a new ComplicatedStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComplicatedStatusWithDefaults() *ComplicatedStatus {
	this := ComplicatedStatus{}
	return &this
}

// GetState returns the State field value
func (o *ComplicatedStatus) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ComplicatedStatus) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ComplicatedStatus) SetState(v string) {
	o.State = v
}

// GetMarks returns the Marks field value
func (o *ComplicatedStatus) GetMarks() []ComplicatedStatusMarksInner {
	if o == nil {
		var ret []ComplicatedStatusMarksInner
		return ret
	}

	return o.Marks
}

// GetMarksOk returns a tuple with the Marks field value
// and a boolean to check if the value has been set.
func (o *ComplicatedStatus) GetMarksOk() ([]ComplicatedStatusMarksInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Marks, true
}

// SetMarks sets field value
func (o *ComplicatedStatus) SetMarks(v []ComplicatedStatusMarksInner) {
	o.Marks = v
}

// GetFrom returns the From field value
func (o *ComplicatedStatus) GetFrom() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *ComplicatedStatus) GetFromOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *ComplicatedStatus) SetFrom(v time.Time) {
	o.From = v
}

func (o ComplicatedStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComplicatedStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["state"] = o.State
	toSerialize["marks"] = o.Marks
	toSerialize["from"] = o.From
	return toSerialize, nil
}

func (o *ComplicatedStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"state",
		"marks",
		"from",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComplicatedStatus := _ComplicatedStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varComplicatedStatus)

	if err != nil {
		return err
	}

	*o = ComplicatedStatus(varComplicatedStatus)

	return err
}

type NullableComplicatedStatus struct {
	value *ComplicatedStatus
	isSet bool
}

func (v NullableComplicatedStatus) Get() *ComplicatedStatus {
	return v.value
}

func (v *NullableComplicatedStatus) Set(val *ComplicatedStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableComplicatedStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableComplicatedStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComplicatedStatus(val *ComplicatedStatus) *NullableComplicatedStatus {
	return &NullableComplicatedStatus{value: val, isSet: true}
}

func (v NullableComplicatedStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComplicatedStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


