/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ComplicatedStatusMarksInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComplicatedStatusMarksInner{}

// ComplicatedStatusMarksInner struct for ComplicatedStatusMarksInner
type ComplicatedStatusMarksInner struct {
	// Timestamp of the mark
	Timestamp time.Time `json:"timestamp"`
	// Reason for the compliance mark
	Reason string `json:"reason"`
}

type _ComplicatedStatusMarksInner ComplicatedStatusMarksInner

// NewComplicatedStatusMarksInner instantiates a new ComplicatedStatusMarksInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComplicatedStatusMarksInner(timestamp time.Time, reason string) *ComplicatedStatusMarksInner {
	this := ComplicatedStatusMarksInner{}
	this.Timestamp = timestamp
	this.Reason = reason
	return &this
}

// NewComplicatedStatusMarksInnerWithDefaults instantiates a new ComplicatedStatusMarksInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComplicatedStatusMarksInnerWithDefaults() *ComplicatedStatusMarksInner {
	this := ComplicatedStatusMarksInner{}
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *ComplicatedStatusMarksInner) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ComplicatedStatusMarksInner) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ComplicatedStatusMarksInner) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetReason returns the Reason field value
func (o *ComplicatedStatusMarksInner) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *ComplicatedStatusMarksInner) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *ComplicatedStatusMarksInner) SetReason(v string) {
	o.Reason = v
}

func (o ComplicatedStatusMarksInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComplicatedStatusMarksInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["reason"] = o.Reason
	return toSerialize, nil
}

func (o *ComplicatedStatusMarksInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
		"reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComplicatedStatusMarksInner := _ComplicatedStatusMarksInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varComplicatedStatusMarksInner)

	if err != nil {
		return err
	}

	*o = ComplicatedStatusMarksInner(varComplicatedStatusMarksInner)

	return err
}

type NullableComplicatedStatusMarksInner struct {
	value *ComplicatedStatusMarksInner
	isSet bool
}

func (v NullableComplicatedStatusMarksInner) Get() *ComplicatedStatusMarksInner {
	return v.value
}

func (v *NullableComplicatedStatusMarksInner) Set(val *ComplicatedStatusMarksInner) {
	v.value = val
	v.isSet = true
}

func (v NullableComplicatedStatusMarksInner) IsSet() bool {
	return v.isSet
}

func (v *NullableComplicatedStatusMarksInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComplicatedStatusMarksInner(val *ComplicatedStatusMarksInner) *NullableComplicatedStatusMarksInner {
	return &NullableComplicatedStatusMarksInner{value: val, isSet: true}
}

func (v NullableComplicatedStatusMarksInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComplicatedStatusMarksInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


