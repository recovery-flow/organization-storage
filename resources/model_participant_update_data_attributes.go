/*
test

example

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ParticipantUpdateDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParticipantUpdateDataAttributes{}

// ParticipantUpdateDataAttributes struct for ParticipantUpdateDataAttributes
type ParticipantUpdateDataAttributes struct {
	// Organization id
	OrgId string `json:"org_id"`
	// first name of participant
	FirstName *string `json:"first_name,omitempty"`
	// second name of participant
	SecondName *string `json:"second_name,omitempty"`
	// third name of participant
	ThirdName *string `json:"third_name,omitempty"`
	// name of participant
	DisplayName *string `json:"display_name,omitempty"`
	// position in the company
	Position *string `json:"position,omitempty"`
	// Description
	Desc *string `json:"desc,omitempty"`
	// User role
	Role *string `json:"role,omitempty"`
}

type _ParticipantUpdateDataAttributes ParticipantUpdateDataAttributes

// NewParticipantUpdateDataAttributes instantiates a new ParticipantUpdateDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParticipantUpdateDataAttributes(orgId string) *ParticipantUpdateDataAttributes {
	this := ParticipantUpdateDataAttributes{}
	this.OrgId = orgId
	return &this
}

// NewParticipantUpdateDataAttributesWithDefaults instantiates a new ParticipantUpdateDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParticipantUpdateDataAttributesWithDefaults() *ParticipantUpdateDataAttributes {
	this := ParticipantUpdateDataAttributes{}
	return &this
}

// GetOrgId returns the OrgId field value
func (o *ParticipantUpdateDataAttributes) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *ParticipantUpdateDataAttributes) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *ParticipantUpdateDataAttributes) SetOrgId(v string) {
	o.OrgId = v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *ParticipantUpdateDataAttributes) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParticipantUpdateDataAttributes) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *ParticipantUpdateDataAttributes) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *ParticipantUpdateDataAttributes) SetFirstName(v string) {
	o.FirstName = &v
}

// GetSecondName returns the SecondName field value if set, zero value otherwise.
func (o *ParticipantUpdateDataAttributes) GetSecondName() string {
	if o == nil || IsNil(o.SecondName) {
		var ret string
		return ret
	}
	return *o.SecondName
}

// GetSecondNameOk returns a tuple with the SecondName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParticipantUpdateDataAttributes) GetSecondNameOk() (*string, bool) {
	if o == nil || IsNil(o.SecondName) {
		return nil, false
	}
	return o.SecondName, true
}

// HasSecondName returns a boolean if a field has been set.
func (o *ParticipantUpdateDataAttributes) HasSecondName() bool {
	if o != nil && !IsNil(o.SecondName) {
		return true
	}

	return false
}

// SetSecondName gets a reference to the given string and assigns it to the SecondName field.
func (o *ParticipantUpdateDataAttributes) SetSecondName(v string) {
	o.SecondName = &v
}

// GetThirdName returns the ThirdName field value if set, zero value otherwise.
func (o *ParticipantUpdateDataAttributes) GetThirdName() string {
	if o == nil || IsNil(o.ThirdName) {
		var ret string
		return ret
	}
	return *o.ThirdName
}

// GetThirdNameOk returns a tuple with the ThirdName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParticipantUpdateDataAttributes) GetThirdNameOk() (*string, bool) {
	if o == nil || IsNil(o.ThirdName) {
		return nil, false
	}
	return o.ThirdName, true
}

// HasThirdName returns a boolean if a field has been set.
func (o *ParticipantUpdateDataAttributes) HasThirdName() bool {
	if o != nil && !IsNil(o.ThirdName) {
		return true
	}

	return false
}

// SetThirdName gets a reference to the given string and assigns it to the ThirdName field.
func (o *ParticipantUpdateDataAttributes) SetThirdName(v string) {
	o.ThirdName = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ParticipantUpdateDataAttributes) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParticipantUpdateDataAttributes) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ParticipantUpdateDataAttributes) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ParticipantUpdateDataAttributes) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ParticipantUpdateDataAttributes) GetPosition() string {
	if o == nil || IsNil(o.Position) {
		var ret string
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParticipantUpdateDataAttributes) GetPositionOk() (*string, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ParticipantUpdateDataAttributes) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given string and assigns it to the Position field.
func (o *ParticipantUpdateDataAttributes) SetPosition(v string) {
	o.Position = &v
}

// GetDesc returns the Desc field value if set, zero value otherwise.
func (o *ParticipantUpdateDataAttributes) GetDesc() string {
	if o == nil || IsNil(o.Desc) {
		var ret string
		return ret
	}
	return *o.Desc
}

// GetDescOk returns a tuple with the Desc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParticipantUpdateDataAttributes) GetDescOk() (*string, bool) {
	if o == nil || IsNil(o.Desc) {
		return nil, false
	}
	return o.Desc, true
}

// HasDesc returns a boolean if a field has been set.
func (o *ParticipantUpdateDataAttributes) HasDesc() bool {
	if o != nil && !IsNil(o.Desc) {
		return true
	}

	return false
}

// SetDesc gets a reference to the given string and assigns it to the Desc field.
func (o *ParticipantUpdateDataAttributes) SetDesc(v string) {
	o.Desc = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *ParticipantUpdateDataAttributes) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParticipantUpdateDataAttributes) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *ParticipantUpdateDataAttributes) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *ParticipantUpdateDataAttributes) SetRole(v string) {
	o.Role = &v
}

func (o ParticipantUpdateDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParticipantUpdateDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["org_id"] = o.OrgId
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.SecondName) {
		toSerialize["second_name"] = o.SecondName
	}
	if !IsNil(o.ThirdName) {
		toSerialize["third_name"] = o.ThirdName
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Desc) {
		toSerialize["desc"] = o.Desc
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	return toSerialize, nil
}

func (o *ParticipantUpdateDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"org_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParticipantUpdateDataAttributes := _ParticipantUpdateDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParticipantUpdateDataAttributes)

	if err != nil {
		return err
	}

	*o = ParticipantUpdateDataAttributes(varParticipantUpdateDataAttributes)

	return err
}

type NullableParticipantUpdateDataAttributes struct {
	value *ParticipantUpdateDataAttributes
	isSet bool
}

func (v NullableParticipantUpdateDataAttributes) Get() *ParticipantUpdateDataAttributes {
	return v.value
}

func (v *NullableParticipantUpdateDataAttributes) Set(val *ParticipantUpdateDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableParticipantUpdateDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableParticipantUpdateDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParticipantUpdateDataAttributes(val *ParticipantUpdateDataAttributes) *NullableParticipantUpdateDataAttributes {
	return &NullableParticipantUpdateDataAttributes{value: val, isSet: true}
}

func (v NullableParticipantUpdateDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParticipantUpdateDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


